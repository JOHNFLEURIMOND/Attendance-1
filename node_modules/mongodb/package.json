{
  "_args": [
    [
      {
        "raw": "mongodb@^2.1.4",
        "scope": null,
        "escapedName": "mongodb",
        "name": "mongodb",
        "rawSpec": "^2.1.4",
        "spec": ">=2.1.4 <3.0.0",
        "type": "range"
      },
      "/home/johnf/Desktop/savage-demo-master"
    ]
  ],
  "_from": "mongodb@>=2.1.4 <3.0.0",
  "_id": "mongodb@2.2.35",
  "_inCache": true,
  "_location": "/mongodb",
  "_nodeVersion": "8.9.4",
  "_npmOperationalInternal": {
    "host": "s3://npm-registry-packages",
    "tmp": "tmp/mongodb_2.2.35_1519659109335_0.9965520316927079"
  },
  "_npmUser": {
    "name": "mbroadst",
    "email": "mbroadst@gmail.com"
  },
  "_npmVersion": "5.6.0",
  "_phantomChildren": {},
  "_requested": {
    "raw": "mongodb@^2.1.4",
    "scope": null,
    "escapedName": "mongodb",
    "name": "mongodb",
    "rawSpec": "^2.1.4",
    "spec": ">=2.1.4 <3.0.0",
    "type": "range"
  },
  "_requiredBy": [
    "/"
  ],
  "_resolved": "https://registry.npmjs.org/mongodb/-/mongodb-2.2.35.tgz",
  "_shasum": "cd1b5af8a9463e3f9a787fa5b3d05565579730f9",
  "_shrinkwrap": null,
  "_spec": "mongodb@^2.1.4",
  "_where": "/home/johnf/Desktop/savage-demo-master",
  "author": {
    "name": "Christian Kvalheim"
  },
  "bugs": {
    "url": "https://github.com/mongodb/node-mongodb-native/issues"
  },
  "dependencies": {
    "es6-promise": "3.2.1",
    "mongodb-core": "2.1.19",
    "readable-stream": "2.2.7"
  },
  "description": "The official MongoDB driver for Node.js",
  "devDependencies": {
    "JSONStream": "^1.0.7",
    "betterbenchmarks": "^0.1.0",
    "bluebird": "3.4.6",
    "bson": "latest",
    "cli-table": "^0.3.1",
    "co": "4.6.0",
    "colors": "^1.1.2",
    "conventional-changelog-cli": "^1.3.5",
    "coveralls": "^2.11.6",
    "eslint": "^3.8.1",
    "event-stream": "^3.3.2",
    "gleak": "0.5.0",
    "integra": "0.1.8",
    "jsdoc": "3.4.0",
    "ldjson-stream": "^1.2.1",
    "mongodb-extended-json": "1.7.1",
    "mongodb-topology-manager": "1.0.x",
    "mongodb-version-manager": "github:christkv/mongodb-version-manager#master",
    "nyc": "^8.1.0",
    "optimist": "0.6.1",
    "rimraf": "2.5.4",
    "semver": "5.3.0",
    "worker-farm": "^1.3.1"
  },
  "directories": {},
  "dist": {
    "integrity": "sha512-3HGLucDg/8EeYMin3k+nFWChTA85hcYDCw1lPsWR6yV9A6RgKb24BkLiZ9ySZR+S0nfBjWoIUS7cyV6ceGx5Gg==",
    "shasum": "cd1b5af8a9463e3f9a787fa5b3d05565579730f9",
    "tarball": "https://registry.npmjs.org/mongodb/-/mongodb-2.2.35.tgz",
    "fileCount": 38,
    "unpackedSize": 855568
  },
  "engines": {
    "node": ">=0.10.3"
  },
  "gitHead": "0a32bce924100252b1eabe309e70bf2cbe1931fd",
  "homepage": "https://github.com/mongodb/node-mongodb-native",
  "keywords": [
    "mongodb",
    "driver",
    "official"
  ],
  "license": "Apache-2.0",
  "main": "index.js",
  "maintainers": [
    {
      "name": "christkv",
      "email": "christkv@gmail.com"
    },
    {
      "name": "daprahamian",
      "email": "dan.aprahamian@gmail.com"
    },
    {
      "name": "mbroadst",
      "email": "mbroadst@gmail.com"
    }
  ],
  "name": "mongodb",
  "nyc": {
    "include": [
      "lib/**/*.js"
    ]
  },
  "optionalDependencies": {},
  "readme": "[![NPM](https://nodei.co/npm/mongodb.png?downloads=true&downloadRank=true)](https://nodei.co/npm/mongodb/) [![NPM](https://nodei.co/npm-dl/mongodb.png?months=6&height=3)](https://nodei.co/npm/mongodb/)\n\n[![Build Status](https://secure.travis-ci.org/mongodb/node-mongodb-native.svg?branch=2.1)](http://travis-ci.org/mongodb/node-mongodb-native)\n[![Coverage Status](https://coveralls.io/repos/github/mongodb/node-mongodb-native/badge.svg?branch=2.1)](https://coveralls.io/github/mongodb/node-mongodb-native?branch=2.1)\n[![Gitter](https://badges.gitter.im/Join%20Chat.svg)](https://gitter.im/mongodb/node-mongodb-native?utm_source=badge&utm_medium=badge&utm_campaign=pr-badge)\n\n# Description\n\nThe official [MongoDB](https://www.mongodb.com/) driver for Node.js. Provides a high-level API on top of [mongodb-core](https://www.npmjs.com/package/mongodb-core) that is meant for end users.\n\n## MongoDB Node.JS Driver\n\n| what          | where                                          |\n|---------------|------------------------------------------------|\n| documentation | http://mongodb.github.io/node-mongodb-native/  |\n| api-doc        | http://mongodb.github.io/node-mongodb-native/2.2/api/  |\n| source        | https://github.com/mongodb/node-mongodb-native |\n| mongodb       | http://www.mongodb.org/                        |\n\n### Blogs of Engineers involved in the driver\n- Christian Kvalheim [@christkv](https://twitter.com/christkv) <http://christiankvalheim.com>\n\n### Bugs / Feature Requests\n\nThink you’ve found a bug? Want to see a new feature in node-mongodb-native? Please open a\ncase in our issue management tool, JIRA:\n\n- Create an account and login <https://jira.mongodb.org>.\n- Navigate to the NODE project <https://jira.mongodb.org/browse/NODE>.\n- Click **Create Issue** - Please provide as much information as possible about the issue type and how to reproduce it.\n\nBug reports in JIRA for all driver projects (i.e. NODE, PYTHON, CSHARP, JAVA) and the\nCore Server (i.e. SERVER) project are **public**.\n\n### Questions and Bug Reports\n\n * mailing list: https://groups.google.com/forum/#!forum/node-mongodb-native\n * jira: http://jira.mongodb.org/\n\n### Change Log\n\nhttp://jira.mongodb.org/browse/NODE\n\n# Installation\n\nThe recommended way to get started using the Node.js 2.0 driver is by using the `NPM` (Node Package Manager) to install the dependency in your project.\n\n## MongoDB Driver\n\nGiven that you have created your own project using `npm init` we install the mongodb driver and it's dependencies by executing the following `NPM` command.\n\n```\nnpm install mongodb --save\n```\n\nThis will download the MongoDB driver and add a dependency entry in your `package.json` file.\n\n## Troubleshooting\n\nThe MongoDB driver depends on several other packages. These are.\n\n* mongodb-core\n* bson\n* kerberos\n* node-gyp\n\nThe `kerberos` package is a C++ extension that requires a build environment to be installed on your system. You must be able to build node.js itself to be able to compile and install the `kerberos` module. Furthermore the `kerberos` module requires the MIT Kerberos package to correctly compile on UNIX operating systems. Consult your UNIX operation system package manager what libraries to install.\n\n{{% note class=\"important\" %}}\nWindows already contains the SSPI API used for Kerberos authentication. However you will need to install a full compiler tool chain using visual studio C++ to correctly install the kerberos extension.\n{{% /note %}}\n\n### Diagnosing on UNIX\n\nIf you don’t have the build essentials it won’t build. In the case of linux you will need gcc and g++, node.js with all the headers and python. The easiest way to figure out what’s missing is by trying to build the kerberos project. You can do this by performing the following steps.\n\n```\ngit clone https://github.com/christkv/kerberos.git\ncd kerberos\nnpm install\n```\n\nIf all the steps complete you have the right toolchain installed. If you get node-gyp not found you need to install it globally by doing.\n\n```\nnpm install -g node-gyp\n```\n\nIf correctly compiles and runs the tests you are golden. We can now try to install the mongod driver by performing the following command.\n\n```\ncd yourproject\nnpm install mongodb --save\n```\n\nIf it still fails the next step is to examine the npm log. Rerun the command but in this case in verbose mode.\n\n```\nnpm --loglevel verbose install mongodb\n```\n\nThis will print out all the steps npm is performing while trying to install the module.\n\n### Diagnosing on Windows\n\nA known compiler tool chain known to work for compiling `kerberos` on windows is the following.\n\n* Visual Studio c++ 2010 (do not use higher versions)\n* Windows 7 64bit SDK\n* Python 2.7 or higher\n\nOpen visual studio command prompt. Ensure node.exe is in your path and install node-gyp.\n\n```\nnpm install -g node-gyp\n```\n\nNext you will have to build the project manually to test it. Use any tool you use with git and grab the repo.\n\n```\ngit clone https://github.com/christkv/kerberos.git\ncd kerberos\nnpm install\nnode-gyp rebuild\n```\n\nThis should rebuild the driver successfully if you have everything set up correctly.\n\n### Other possible issues\n\nYour python installation might be hosed making gyp break. I always recommend that you test your deployment environment first by trying to build node itself on the server in question as this should unearth any issues with broken packages (and there are a lot of broken packages out there).\n\nAnother thing is to ensure your user has write permission to wherever the node modules are being installed.\n\nQuickStart\n==========\nThe quick start guide will show you how to setup a simple application using node.js and MongoDB. Its scope is only how to set up the driver and perform the simple crud operations. For more in depth coverage we encourage reading the tutorials.\n\nCreate the package.json file\n----------------------------\nLet's create a directory where our application will live. In our case we will put this under our projects directory.\n\n```\nmkdir myproject\ncd myproject\n```\n\nEnter the following command and answer the questions to create the initial structure for your new project\n\n```\nnpm init\n```\n\nNext we need to edit the generated package.json file to add the dependency for the MongoDB driver. The package.json file below is just an example and your will look different depending on how you answered the questions after entering `npm init`\n\n```\n{\n  \"name\": \"myproject\",\n  \"version\": \"1.0.0\",\n  \"description\": \"My first project\",\n  \"main\": \"index.js\",\n  \"repository\": {\n    \"type\": \"git\",\n    \"url\": \"git://github.com/christkv/myfirstproject.git\"\n  },\n  \"dependencies\": {\n    \"mongodb\": \"~2.0\"\n  },\n  \"author\": \"Christian Kvalheim\",\n  \"license\": \"Apache 2.0\",\n  \"bugs\": {\n    \"url\": \"https://github.com/christkv/myfirstproject/issues\"\n  },\n  \"homepage\": \"https://github.com/christkv/myfirstproject\"\n}\n```\n\nSave the file and return to the shell or command prompt and use **NPM** to install all the dependencies.\n\n```\nnpm install\n```\n\nYou should see **NPM** download a lot of files. Once it's done you'll find all the downloaded packages under the **node_modules** directory.\n\nBooting up a MongoDB Server\n---------------------------\nLet's boot up a MongoDB server instance. Download the right MongoDB version from [MongoDB](http://www.mongodb.org), open a new shell or command line and ensure the **mongod** command is in the shell or command line path. Now let's create a database directory (in our case under **/data**).\n\n```\nmongod --dbpath=/data --port 27017\n```\n\nYou should see the **mongod** process start up and print some status information.\n\nConnecting to MongoDB\n---------------------\nLet's create a new **app.js** file that we will use to show the basic CRUD operations using the MongoDB driver.\n\nFirst let's add code to connect to the server and the database **myproject**.\n\n```js\nvar MongoClient = require('mongodb').MongoClient\n  , assert = require('assert');\n\n// Connection URL\nvar url = 'mongodb://localhost:27017/myproject';\n// Use connect method to connect to the Server\nMongoClient.connect(url, function(err, db) {\n  assert.equal(null, err);\n  console.log(\"Connected correctly to server\");\n\n  db.close();\n});\n```\n\nGiven that you booted up the **mongod** process earlier the application should connect successfully and print **Connected correctly to server** to the console.\n\nLet's Add some code to show the different CRUD operations available.\n\nInserting a Document\n--------------------\nLet's create a function that will insert some documents for us.\n\n```js\nvar insertDocuments = function(db, callback) {\n  // Get the documents collection\n  var collection = db.collection('documents');\n  // Insert some documents\n  collection.insertMany([\n    {a : 1}, {a : 2}, {a : 3}\n  ], function(err, result) {\n    assert.equal(err, null);\n    assert.equal(3, result.result.n);\n    assert.equal(3, result.ops.length);\n    console.log(\"Inserted 3 documents into the document collection\");\n    callback(result);\n  });\n}\n```\n\nThe insert command will return a results object that contains several fields that might be useful.\n\n* **result** Contains the result document from MongoDB\n* **ops** Contains the documents inserted with added **_id** fields\n* **connection** Contains the connection used to perform the insert\n\nLet's add call the **insertDocuments** command to the **MongoClient.connect** method callback.\n\n```js\nvar MongoClient = require('mongodb').MongoClient\n  , assert = require('assert');\n\n// Connection URL\nvar url = 'mongodb://localhost:27017/myproject';\n// Use connect method to connect to the Server\nMongoClient.connect(url, function(err, db) {\n  assert.equal(null, err);\n  console.log(\"Connected correctly to server\");\n\n  insertDocuments(db, function() {\n    db.close();\n  });\n});\n```\n\nWe can now run the update **app.js** file.\n\n```\nnode app.js\n```\n\nYou should see the following output after running the **app.js** file.\n\n```\nConnected correctly to server\nInserted 3 documents into the document collection\n```\n\nUpdating a document\n-------------------\nLet's look at how to do a simple document update by adding a new field **b** to the document that has the field **a** set to **2**.\n\n```js\nvar updateDocument = function(db, callback) {\n  // Get the documents collection\n  var collection = db.collection('documents');\n  // Update document where a is 2, set b equal to 1\n  collection.updateOne({ a : 2 }\n    , { $set: { b : 1 } }, function(err, result) {\n    assert.equal(err, null);\n    assert.equal(1, result.result.n);\n    console.log(\"Updated the document with the field a equal to 2\");\n    callback(result);\n  });  \n}\n```\n\nThe method will update the first document where the field **a** is equal to **2** by adding a new field **b** to the document set to **1**. Let's update the callback function from **MongoClient.connect** to include the update method.\n\n```js\nvar MongoClient = require('mongodb').MongoClient\n  , assert = require('assert');\n\n// Connection URL\nvar url = 'mongodb://localhost:27017/myproject';\n// Use connect method to connect to the Server\nMongoClient.connect(url, function(err, db) {\n  assert.equal(null, err);\n  console.log(\"Connected correctly to server\");\n\n  insertDocuments(db, function() {\n    updateDocument(db, function() {\n      db.close();\n    });\n  });\n});\n```\n\nDelete a document\n-----------------\nNext lets delete the document where the field **a** equals to **3**.\n\n```js\nvar deleteDocument = function(db, callback) {\n  // Get the documents collection\n  var collection = db.collection('documents');\n  // Delete document where a is 3\n  collection.deleteOne({ a : 3 }, function(err, result) {\n    assert.equal(err, null);\n    assert.equal(1, result.result.n);\n    console.log(\"Removed the document with the field a equal to 3\");\n    callback(result);\n  });\n}\n```\n\nThis will delete the first document where the field **a** equals to **3**. Let's add the method to the **MongoClient\n.connect** callback function.\n\n```js\nvar MongoClient = require('mongodb').MongoClient\n  , assert = require('assert');\n\n// Connection URL\nvar url = 'mongodb://localhost:27017/myproject';\n// Use connect method to connect to the Server\nMongoClient.connect(url, function(err, db) {\n  assert.equal(null, err);\n  console.log(\"Connected correctly to server\");\n\n  insertDocuments(db, function() {\n    updateDocument(db, function() {\n      deleteDocument(db, function() {\n        db.close();\n      });\n    });\n  });\n});\n```\n\nFinally let's retrieve all the documents using a simple find.\n\nFind All Documents\n------------------\nWe will finish up the Quickstart CRUD methods by performing a simple query that returns all the documents matching the query.\n\n```js\nvar findDocuments = function(db, callback) {\n  // Get the documents collection\n  var collection = db.collection('documents');\n  // Find some documents\n  collection.find({}).toArray(function(err, docs) {\n    assert.equal(err, null);\n    assert.equal(2, docs.length);\n    console.log(\"Found the following records\");\n    console.dir(docs);\n    callback(docs);\n  });\n}\n```\n\nThis query will return all the documents in the **documents** collection. Since we deleted a document the total\ndocuments returned is **2**. Finally let's add the findDocument method to the **MongoClient.connect** callback.\n\n```js\nvar MongoClient = require('mongodb').MongoClient\n  , assert = require('assert');\n\n// Connection URL\nvar url = 'mongodb://localhost:27017/myproject';\n// Use connect method to connect to the Server\nMongoClient.connect(url, function(err, db) {\n  assert.equal(null, err);\n  console.log(\"Connected correctly to server\");\n\n  insertDocuments(db, function() {\n    updateDocument(db, function() {\n      deleteDocument(db, function() {\n        findDocuments(db, function() {\n          db.close();\n        });\n      });\n    });\n  });\n});\n```\n\nThis concludes the QuickStart of connecting and performing some Basic operations using the MongoDB Node.js driver. For more detailed information you can look at the tutorials covering more specific topics of interest.\n\n## Next Steps\n\n * [MongoDB Documentation](http://mongodb.org/)\n * [Read about Schemas](http://learnmongodbthehardway.com/)\n * [Star us on GitHub](https://github.com/mongodb/node-mongodb-native)\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+ssh://git@github.com/mongodb/node-mongodb-native.git"
  },
  "scripts": {
    "changelog": "conventional-changelog -p angular -i HISTORY.md -s",
    "coverage": "nyc node test/runner.js -t functional && node_modules/.bin/nyc report --reporter=text-lcov | node_modules/.bin/coveralls",
    "lint": "eslint lib",
    "test": "node test/runner.js -t functional"
  },
  "version": "2.2.35"
}
